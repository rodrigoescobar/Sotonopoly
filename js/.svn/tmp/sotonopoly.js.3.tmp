//Based on function from the Prototype JS framework.
//This is to make life easier when working with scopes in Javascript.
//You can read more about it here:
//http://www.digital-web.com/articles/scope_in_javascript/
Function.prototype.bind = function ( obj )
{
	var method = this,
	temp = function()
	{
		return method.apply (obj, arguments);
	};

	return temp;
};

//Wrapper function so that we can just rewrite this later on to display stuff
//in our own console.
function log ( data, color )
{
	console.log (data);

	if(typeof color == "undefined") {
		color = "#000000"; // default color for log messages
	}

	var message = $("<div style='color: " + color + ";'> " + data + "</div>");
	$("#log").append(message);
	var position = $("#log div:last").position();
	$("#log").scrollTop(position.top);
	

	
}

function Sotonopoly ( canvas, client_id, game_key )
{
	// Game state. This should be kept up to date by the client.
	// Most messages received from the server should have information on how
	// to update the game state.
	//
	// The board should probably get redrawn as well when the game state changes
	// using the this.redraw() function.
	this.game_state = {
			key: null,
			players: [],
			chance_cards: [],
			community_cards: [],
			buildings: [],
			in_progress: false,
			current_turn: 1,
			started: false
	};

	// All valid messages from the server should have a 'status' field describing
	// what type of message it is. The keys in this message_handlers field
	// should match the possible status types. The JavaScript will then call the
	// function assigned to the message type below.
	this.message_handlers = {
			player_joined: this.onPlayerJoin,
			you: this.onSelfJoined,
			current_players: this.onOtherJoined,
			bought: this.onPlayerBoughtProperty,
			player_ended_turn: this.onPlayerEndTurn,
			game_started: this.onGameStart,
			turn: this.onPlayerTurn,
			die_roll: this.onDieRoll,
			tax: this.onTaxed,
			go_to_jail: this.onJailed
	};

	// Using an array because we might add multiple players from the same client
	// session. This shouldn't really be an array because a client should only
	// be connected once, but for the purposes of making testing easier we'll
	// have it like this...
	this.my_players = [];
	
	var pieces = []; //testing purposes.

	// Is this game started by me?
	this.my_game = false;

	// Some info about our turn
	this.turn = {
		// Moved this turn yet?
		has_moved: false,
	
		// Rolled doubles last turn?
		rolled_doubles: false
	};

	this.initializeBoard (canvas);
	this.updateButtons();
	this.setupGame (client_id, game_key);
}

Sotonopoly.prototype.onJailed = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player_id);
	if ( p === null ) return;

	p.in_jail = true;
	log (p.name + ": Was sent to jail.");
};

Sotonopoly.prototype.onTaxed = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player_id);
	if ( p === null ) return;

	p.money -= data.amount;
	log (p.name + ": Paid tax of Â£" + data.amount, p.colour);
};

Sotonopoly.prototype.onPlayerBoughtProperty = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player);
	if ( p === null ) return;

	var building = this.game_state.buildings[data.property];
	building.owner = p;
	
	p.buildings_owned.push (building);
	p.money -= building.price;
	
	log (p.name + ": Bought " + building.name, p.colour);
};

Sotonopoly.prototype.getPlayerFromTurnNumber = function ( turnNumber )
{
	for ( var p in this.game_state.players )
	{
		var player = this.game_state.players[p];
		if ( player.id == turnNumber )
		{
			return player;
		}
	}

	return null;
};

Sotonopoly.prototype.getMyCurrentPlayer = function ()
{
	for ( var p in this.my_players )
	{
		var player = this.my_players[p];
		if ( player.id == this.game_state.current_turn )
		{
			return player;
		}
	}

	return null;
};

Sotonopoly.prototype.isPlayersTurn = function ( player )
{
	if ( player === null ) return false;
	return current_player.id == this.game_state.current_turn;
};

Sotonopoly.prototype.updateButtons = function()
{
	var current_player = this.getMyCurrentPlayer();

	$("#game-options > *").hide();
	$("#leave-game").show();
	if ( !this.game_state.started )
	{
		$("#add-player").show();
		if ( this.my_game )
		{
			$("#start-game").show();
		}
	}
	else
	{
		if ( current_player === null )
		{
			// If current_player is null, then it's not this particular client's
			// turn.

			// do nothing...
		}
		else
		{
			$("#show-property").show();
			if ( current_player.in_jail )
			{
				$("#roll").show(); // only if had 3 or less tries
				$("#pay-50-fine").show();
				$("#use-jail-card").show();
			}
			else
			{
				if ( this.turn.has_moved )
				{
					var building = this.game_state.buildings[current_player.position];
					if ( !building.owner &&
						(building.type == "pub" || building.type == "property" || building.type == "shop") )
					{
						$("#buy-property").show();
					}
					
					if ( !this.turn.rolled_doubles )
					{
						$("#end-turn").show();
					}
					else
					{
						$("#roll").show();
					}
				}
				else
				{
					$("#roll").show();
				}
			}
		}
	}
};

Sotonopoly.prototype.onGameStart = function ( data )
{
	log ("Game started", "#000000");
	this.game_state.started = true;
	
};

Sotonopoly.prototype.onPlayerEndTurn = function ( data )
{
	var currentPlayer = this.getPlayerFromTurnNumber (this.game_state.current_turn);
	if ( currentPlayer === null )
	{
		return;
	}

	log (currentPlayer.name + ": Ended their turn. (might be incorrect, since client's game state will be updated by first end turn message)", currentPlayer.colour);
	this.game_state.current_turn = data.turn_number;
	this.turn.has_moved = false;
	this.turn.rolled_doubles = false;
};

Sotonopoly.prototype.setupGame = function ( client_id, game_key )
{
	var init_json = { 'client_id': client_id };
	if ( game_key === null )
	{
		var sotonopoly = this;
		myprompt ("Enter Game Key", "Enter the key for the game you want to join. Leave blank to create a new game.", function ( key )
		{
			var starting_game = true;
			if ( key != "" && game_key !== null )
			{
				starting_game = false;
				init_json.game_key = key;
			}
			else
			{
				sotonopoly.my_game = true;
			}

			sotonopoly.setupGameConnection (init_json);
		});
	}
	else
	{
		init_json.game_key = game_key;
		this.setupGameConnection (init_json);
	}
};

Sotonopoly.prototype.setupGameConnection = function ( init_json )
{
	var sotonopoly = this;
	$.post ('/game/setup', init_json, function (data, success, jqXHR)
	{
		//log ("Connecting to server with token " + data.token, "generic");
		log ("Connecting to server...");
		sotonopoly.game_state.key = data.game_key;

		var port = "";
		if ( document.location.port != "" && document.location.port != "80" )
		{
			port = ":" + document.location.port;
		}

		var join_game_url = document.location.protocol + "//" +
		document.location.hostname + port + 
		document.location.pathname + 
		"?join=" + data.game_key;
		$("#join_url").text (join_game_url);

		var channel = new goog.appengine.Channel (data.token);
		socket = channel.open();
		socket.onopen = sotonopoly.onChannelOpen.bind (sotonopoly);
		socket.onmessage = sotonopoly.onChannelMessage.bind (sotonopoly);
		socket.onerror = sotonopoly.onChannelError.bind (sotonopoly);
		socket.onclose = function() { myalert ("Error", "Channel was closed by server."); };

		$("#start-game a").click (function()
				{
			$.post ('/game/start', { game_key: data.game_key });				
				});

		$("#roll a").click (function()
				{
			$.post ('/game/roll', { game_key: data.game_key });
				});

		$("#leave-game a").click (function()
				{
			$.post ('/game/leave', { game_key: data.game_key });
				});

		$("#add-player a").click (function()
				{
			$.post ('/game/add_player', { 'game_key': data.game_key, "name": $("#player_name").val() });
				});

		$("#end-turn a").click (function()
				{
			$.post ('/game/end_turn', { game_key: data.game_key });
				});

		$("#buy-property a").click (function()
				{
			$.post ("/game/buy_property", { game_key: data.game_key });
				});

		$("#pay-50-fine a").click (function()
				{
			$.post ('/game/leave_jail', { game_key: data.game_key, method: "fine" });
				});

		$("#use-jail-card a").click (function()
				{
			$.post ('/game/leave_jail', { game_key: data.game_key, method: "card" });
				});

		sotonopoly.updateButtons();
		$(".box").fadeIn ("slow");
			});
};

Sotonopoly.prototype.onBuyProperty = function ( data )
{
	log ("property bought");
};

Sotonopoly.prototype.addPlayer = function ( player )
{
	var p = this.getPlayerFromTurnNumber (player.turn_number);
	if ( p === null )
	{
		// If a player doesn't already exist with this turn number, then add.
		// This might not be true if you're connected multiple times..
		p = {
				id: player.turn_number,
				name: player.name,
				piece: player.piece,
				money: player.money,
				position: player.position,
				jail_cards: 0,
				in_jail: false,
				buildings_owned: [],
				colour: player.colour,
				jailbreak_attempts: 0
		};
		this.game_state.players.push (p);
	}
	return p;
};

Sotonopoly.prototype.onOtherJoined = function ( data )
{
	for (count=0; count<data.current_players.length; count=count+1)
	{
		log (data.current_players[count]['name'] + ": Currently playing", data.current_players[count]['colour']); // do we really want to log this?

		var player_data = data.current_players[count];
		this.addPlayer (player_data);
	}
};

Sotonopoly.prototype.onSelfJoined = function ( data )
{
	//log ("you joined!"); // surely we don't want to log this? 
	var myPlayer = this.getPlayerFromTurnNumber (data.turn_number);
	if ( myPlayer !== null )
	{
		this.my_players.push (myPlayer);
	}
};

Sotonopoly.prototype.onJoinGame = function()
{
	log ("joined game");
};


Sotonopoly.prototype.onPlayerJoin = function ( data )
{
	this.addPlayer (data);
	var xlinkNS="http://www.w3.org/1999/xlink"; // namespace for linking to other documents

	pieces.push(data.piece);
	for ( pieceName in pieces )
	{
		var piece = document.getElementById(pieces[pieceName]);
		piece.setAttributeNS(null, "opacity", 1);
	}
	log (data.name + ": Joined the game", data.colour);
};

Sotonopoly.prototype.onPlayerTurn = function (data)
{

	var currentPlayer = this.getPlayerFromTurnNumber(this.game_state.current_turn);
	log (data.name + ": It's my turn", currentPlayer.colour);
};

Sotonopoly.prototype.onDieRoll = function(data)
{
	var currentPlayer = this.getPlayerFromTurnNumber (this.game_state.current_turn);
	var newPosition = data.move_to;
	var building = this.game_state.buildings[newPosition];
	var xCoor = building.pos[0];
	var yCoor = building.pos[1];
	var piece = document.getElementById(currentPlayer.piece);
	
	piece.setAttributeNS(null, 'x', xCoor);
	piece.setAttributeNS(null, 'y', yCoor);
	
	this.turn.has_moved = true;
	this.turn.rolled_doubles = (data.die1 == data.die2);
	
	if ( currentPlayer.position < newPosition )
	{
		// Passed GO!
		currentPlayer.money += 200;
	}
	
	currentPlayer.position = newPosition;
	
	log (currentPlayer.name+" has rolled "+data.die1+" and "+data.die2+". This player is moving to "+building.name, currentPlayer.colour);
};

Sotonopoly.prototype.initializeBoard = function ( canvas )
{

	// Hex colours for each of the categories on the board
	var brown = "#9f4710";
	var lightBlue = "#00c2f5";
	var pink = "#ff006e";
	var orange = "#ff7600";
	var red = "#ff0000";
	var yellow = "#faea00";
	var green = "#00ad5c";
	var darkBlue = "#2c43a3";

	// Locations are in order. The order needs to match the order of the locations
	// on the board in a clockwise direction starting from GO!

	this.game_state.pieces = [
	                          {pos: [710, 700], size: [24, 24], name: "mortarboard", path: "images/mortarboard.png"}, 
	                          {pos: [760, 700], size: [24, 24], name: "dolphin", path: "images/dolphin.png"}, 
	                          {pos: [710, 750], size: [24, 24], name: "book", path: "images/book.png"}, 
	                          {pos: [760, 750], size: [24, 24], name: "glass", path: "images/glass.png"},
	                          ];

	this.game_state.buildings = [
	                             { pos: [692, 693], size: [108, 107], name: "GO!" },
	                             { pos: [625, 693], size: [67, 107], name: "Avenue Campus", color: "#9f4710", price: 60, rent: [2, 10, 30, 90, 160, 250], houses: 50, mortgage: 30, type: "property" },
	                             { pos: [564, 693], size: [61, 107], name: "Community Chest", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"},
	                             { pos: [499, 693], size: [65, 107], name: "Winchester Campus", color: "#9f4710", price: 60, rent: [4, 20, 60, 180, 320, 450], houses: 50, mortgage: 30, type: "property" },
	                             { pos: [434, 693], size: [65, 107], name: "Hobbit Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
	                             { pos: [369, 693], size: [65, 107], name: "The Bridge", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
	                             { pos: [304, 693], size: [65, 107], name: "Shackleton", color: "#00c2f5", price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
	                             { pos: [239, 693], size: [65, 107], name: "Chance" },
	                             { pos: [174, 693], size: [65, 107], name: "Management", color: "#00c2f5",  price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
	                             { pos: [109, 693], size: [65, 107], name: "Music", color: "#00c2f5",  price: 120, rent: [8, 40, 100, 300, 450, 600], houses: 50, mortgage: 60, type: "property" },
	                             { pos: [0, 693], size: [108, 107], name: "Jail", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "jail" },
	                             { pos: [0, 628], size: [108, 65], name: "Law", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 120, type: "property" },
	                             { pos: [0, 563], size: [108, 65], name: "SUSU Shop", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "images/shop-logo.png" },
	                             { pos: [0, 498], size: [108, 65], name: "Murray Building", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 70, type: "property" },
	                             { pos: [0, 433], size: [108, 65], name: "Nuffield Theatre", color: "#ff006e", price: 160, rent: [12, 60, 180, 500, 700, 900], houses: 100, mortgage: 80, type: "property" },
	                             { pos: [0, 368], size: [108, 65], name: "The Stag's", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
	                             { pos: [0, 303], size: [108, 65], name: "Politics", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
	                             { pos: [0, 238], size: [108, 65], name: "Community Chest" },
	                             { pos: [0, 173], size: [108, 65], name: "Tizard Building", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
	                             { pos: [0, 108], size: [108, 65], name: "Psychology", color: "#ff7600", price: 200, rent: [16, 80, 220, 600, 800, 1000], houses: 100, mortgage: 100, type: "property" },
	                             { pos: [0, 0], size: [108, 108], name: "Free Parking" },
	                             { pos: [109, 0], size: [65, 107], name: "Physics", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
	                             { pos: [174, 0], size: [63, 107], name: "Chance" },
	                             { pos: [238, 0], size: [65, 107], name: "Lanchester", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
	                             { pos: [304, 0], size: [65, 107], name: "Maths", color: "#f00", price: 240, rent: [20, 100, 300, 750, 925, 1100], houses: 150, mortgage: 120, type: "property" },
	                             { pos: [369, 0], size: [65, 107], name: "The Stile", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
	                             { pos: [434, 0], size: [65, 107], name: "Eustice", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 130, type: "property" },
	                             { pos: [499, 0], size: [65, 107], name: "Graham Hill", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 13, type: "property" },
	                             { pos: [564, 0], size: [65, 107], name: "SUSU CafÃ©", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "images/cafe-logo.png" },
	                             { pos: [628, 0], size: [64, 107], name: "Chemistry", color: "#faea00", price: 280, rent: [24, 120, 360, 850, 1025, 1200], houses: 150, mortgage: 140, type: "property" },
	                             { pos: [692, 0], size: [108, 108], name: "Go to Jail" },
	                             { pos: [692, 108], size: [108, 65], name: "Nightingale", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
	                             { pos: [692, 173], size: [108, 65], name: "EEE", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
	                             { pos: [692, 238], size: [108, 65], name: "Community Chest" },
	                             { pos: [692, 303], size: [108, 65], name: "Life Sciences", color: "#00ad5c", price: 320, rent: [28, 150, 450, 1000, 1400], houses: 200, mortgage: 160, type: "property" },
	                             { pos: [692, 368], size: [108, 65], name: "The Crown Inn", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
	                             { pos: [692, 433], size: [108, 65], name: "Chance", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"  },
	                             { pos: [692, 498], size: [108, 65], name: "Zepler", color: "#2c43a3", price: 350, rent: [28, 150, 450, 1000, 1200, 1400], houses: 200, mortgage: 160, type: "property" },
	                             { pos: [692, 563], size: [108, 65], name: "Jesters Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
	                             { pos: [692, 628], size: [108, 65], name: "Mountbatten", color: "#2c43a3", price: 400, rent: [50, 200, 600, 1400, 1700, 2000], houses: 200, mortgage: 200, type: "property" },
	                             ];

	var svgNS = "http://www.w3.org/2000/svg";
	var xlinkNS="http://www.w3.org/1999/xlink"; // namespace for linking to other documents
	var svg = canvas;


	for ( var i in this.game_state.buildings )
	{
		var a = this.game_state.buildings[i];
		var element = document.createElementNS (svgNS, "rect");
		$(element)
			.attr ({
				x: a.pos[0],
				y: a.pos[1],
				width: a.size[0],
				height: a.size[1],
				opacity: 0.0,
				color: a.color == "none" ? "white" : a.color
			})
			.css ({
				"stroke-width": 2,
				fill: "white"
			});

		// Add the newly created rect element to the board
		$(svg).append (element);
		a.element = element;

		$(element)
			// Assign data to this rect element
			.data ("area", a)
			.mouseover (function()
			{
				var data = $(this).data("area");            
				$(this).attr ("opacity", "0.5");
				$(".location").stop (true, true);

				if ( data.type == "property" )
				{
					if ( data.color != "none" )
					{
						$("#property .title").css ("background-color", data.color);
						// Small hack to get the text to turn black for yellow backgrounds
						if ( data.color == "#faea00" )
						{
							$("#property .title").css ("color", "black");
						}
						else
						{
							$("#property .title").css ("color", "white");
						}
					}
					else
					{
						$("#property .title").css ("background-color", "#fff");
					}
					$("#property .title").text (data.name);
					$("#property .rent-site-only").text(data.rent[0]);
					$("#property .rent-one-house").text(data.rent[1]);
					$("#property .rent-two-houses").text(data.rent[2]);
					$("#property .rent-three-houses").text(data.rent[3]);
					$("#property .rent-four-houses").text(data.rent[4]);
					$("#property .rent-hotel").text(data.rent[5]);

					// test for ownership at some point
					// the #ownership div will show who owns the property
					$("#property #ownership").hide();

					$("#property").fadeIn ("fast");
				}
				else if ( data.type == "pub" )
				{
					$("#pub .title").text (data.name);

					$("#pub").fadeIn ("fast");
				}
				else if ( data.type == "shop" )
				{
					$("#shop .title").text (data.name);
					$("#shop #shop-image").attr ("src", data.logo);

					$("#shop").fadeIn ("fast");
				}
			})
			.mouseout (function()
			{
				$(this).attr ("opacity", "0.0");
				$(".location").hide();
			})
			.mousemove (function (e)
			{
				var area = $(this).data ("area");

				// Let's be smart about where to put this..
				var top, left, right, bottom;
				var div = $("#" + area.type);
				var pagewidth = parseInt ($(document).width());
				var pageheight = parseInt ($(document).height());
				var divwidth = parseInt (div.outerWidth());
				var divheight = parseInt (div.outerHeight());

				top = e.pageY + 10;
				left = e.pageX;
				right = left + divwidth;
				bottom = top + divheight;

				if ( right > pagewidth )
				{
					left = e.pageX - divwidth;
				}

				if ( bottom > pageheight )
				{
					top = e.pageY - divheight - 10;
				}

				$("#" + area.type).offset ({"top": top, "left": left});
			});
	}

	for ( var i in this.game_state.pieces )
	{
		var a = this.game_state.pieces[i];
		var piece = document.createElementNS (svgNS, "image");
		$(piece)
		.attr ({
			id: a.name,
			x: a.pos[0],
			y: a.pos[1],
			width: a.size[0],
			height: a.size[1],
			opacity: 0
		});

		piece.setAttributeNS(xlinkNS, "href", a.path);
		// Add the newly created rect element to the board
		$(svg).append(piece);
	}
};

Sotonopoly.prototype.onChannelOpen = function()
{
	log ("Connection with server open", "generic");
};

//Acts as a message dispatcher. Message is dispatched based on the
//message.data.status field.
Sotonopoly.prototype.onChannelMessage = function ( message )
{
	var msg = $.parseJSON (message.data);
	if ( 'error' in msg )
	{
		myalert ("Error", msg.error);
		return;
	}

	if ( !('status' in msg) )
	{
		log ("could not dispatch the message to correct handler. no status key exists in JSON object");
		log (msg);
	}
	else
	{
		if ( msg.status in this.message_handlers )
		{
			this.message_handlers[msg.status].call (this, msg);
			this.updateButtons();
			this.redraw();
		}
		else
		{
			log ("no message handler exists for status \"" + msg.status + "\"");
		}
	}
};

Sotonopoly.prototype.onChannelError = function ( err )
{
	log ("ERROR: " + err.description);
};

//Updates the positions of pieces and stuff
Sotonopoly.prototype.redraw = function()
{

};


