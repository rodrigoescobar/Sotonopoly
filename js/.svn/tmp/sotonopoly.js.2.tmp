// Based on function from the Prototype JS framework.
// This is to make life easier when working with scopes in Javascript.
// You can read more about it here:
// http://www.digital-web.com/articles/scope_in_javascript/
Function.prototype.bind = function ( obj )
{
	var method = this,
		temp = function()
		{
			return method.apply (obj, arguments);
		};
		
	return temp;
};

// Wrapper function so that we can just rewrite this later on to display stuff
// in our own console.
function log ( data )
{
	console.log (data);
	var content = $("#log").text();
	content += "\n" + data;
	$("#log").text(content);
}

function Sotonopoly ( canvas, client_id, game_key )
{
	this.initializeBoard (canvas);
	this.setupGame (client_id, game_key);
	
	// Game state. This should be kept up to date by the client.
	// Most messages received from the server should have information on how
	// to update the game state.
	//
	// The board should probably get redrawn as well when the game state changes
	// using the this.redraw() function.
	this.game_state = {
		key: null,
		players: [],
		chance_cards: [],
		community_cards: [],
		buildings: [],
		in_progress: false,
		current_turn: 1
	};
	
	// All valid messages from the server should have a 'status' field describing
	// what type of message it is. The keys in this message_handlers field
	// should match the possible status types. The JavaScript will then call the
	// function assigned to the message type below.
	this.message_handlers = {
		player_joined: this.onPlayerJoin,
		you: this.onSelfJoined,
		current_players: this.onOtherJoined,
		edit_property: this.onEditProperty,
		player_ended_turn: this.onPlayerEndTurn,
		game_started: this.onGameStart,
		play_turn: this.OnPlayerStartTurn
	};
}

Sotonopoly.prototype.onGameStart = function ( data )
{
	log ("Game started");
}

Sotonopoly.prototype.onPlayerEndTurn = function ( data )
{
	log (data.name + " ended their turn.");
}

Sotonopoly.prototype.onPlayerStartTurn = function ( data)
{
	if (data.turnNumber == turn.shift()){
		log(data.name + 'got a '+
	}
	onPlayerEndTurn(data);
}


<<<<<<< .mine
=======
Sotonopoly.prototype.onPlayerEndTurn = function ( data )
{
	var currentPlayer = this.getPlayerFromTurnNumber (this.game_state.current_turn);
	if ( currentPlayer === null )
	{
		return;
	}
	
	log (currentPlayer.name + " ended their turn.");
	this.game_state.current_turn = data.turn_number;
}

>>>>>>> .r254
Sotonopoly.prototype.setupGame = function ( client_id, game_key )
{
	turn = 1;
	if ( game_key === null )
	{
		game_key = prompt ("Enter the key for the game you want to join. Leave blank to create a new game.");
	}
	
	var init_json = { 'client_id': client_id };
	var starting_game = true;
	if ( game_key != "" && game_key !== null )
	{
		starting_game = false;
		init_json.game_key = game_key;
	}
	
	var sotonopoly = this;
	$.post ('/game/setup', init_json, function (data, success, jqXHR)
	{
		log ("Connecting to server with token " + data.token);
		sotonopoly.game_state.key = data.game_key;
		
		var join_game_url = document.location.protocol + "//" +
			document.location.hostname +
			document.location.pathname + 
			"?join=" + data.game_key;
		$("#join_url").val (join_game_url);

		var channel = new goog.appengine.Channel (data.token);
		socket = channel.open();
		socket.onopen = sotonopoly.onChannelOpen.bind (sotonopoly);
		socket.onmessage = sotonopoly.onChannelMessage.bind (sotonopoly);
		socket.onerror = sotonopoly.onChannelError.bind (sotonopoly);
		socket.onclose = function() { alert ("CLOSED"); };
	
		if ( starting_game )
		{
			$("#start-game-wrapper").show();
			$("#start-game").click (function()
			{
				$.post ('/game/start', { game_key: data.game_key });				
			});
		}

		$("#roll").click (function()
		{
			$.post ('/game/roll', { game_key: data.game_key });
		});
	
		$("#leave-game").click (function()
		{
			$.post ('/game/leave', { game_key: data.game_key });
		});
	
		$("#leave-jail").click (function()
		{
			$.post ('/game/leave_jail', { game_key: data.game_key });
		});
	
		$("#addplayer").click (function()
		{
			$.post ('/game/add_player', { 'game_key': data.game_key, "name": $("#player_name").val() });
			
		});
        
        $("#end-turn").click (function()
        {
            $.post ('/game/end_turn', { game_key: data.game_key });
        });
	});
}

Sotonopoly.prototype.onBuyProperty = function ( data )
{
	log ("property bought");
}

Sotonopoly.prototype.onOtherJoined = function ( data )
{
	for (count=0; count<data.current_players.length; count=count+1)
	{
		log (data.current_players[count]['name'] + " is currently playing");
	}
}

Sotonopoly.prototype.onSelfJoined = function ( data )
{
	log ("you joined!");
}

Sotonopoly.prototype.onJoinGame = function()
{
	log ("joined game");
}

var turn = [];
var positions = [[0, 0],[710, 700], [760, 700], [710, 750], [760, 750]];

Sotonopoly.prototype.onPlayerJoin = function ( data )
{
	log (data.name + " has joined");
	
	var canvas = $("#canvas"); // grabs the "board" element (canvas)
	var svgNS = "http://www.w3.org/2000/svg";
	var xlinkNS="http://www.w3.org/1999/xlink"; // namespace for linking to other documents

	var playerNumber = data.turn_number;
	
	
	var piece = document.createElementNS (svgNS, "image"); // creates a SVG image element
	var imagePath = "js/"+data.piece+".png"; // the path to the image for the player icon
	$(piece)
            .attr ({
				x: positions[playerNumber][0],
				y: positions[playerNumber][1],
            	width: 24,
            	height: 24,
        	});
	piece.setAttributeNS(xlinkNS, "href", imagePath); // uses the xlink NS to link to the src of the icon
	/* FOR FUTURE REF, IF YOU NEED TO USE TWO NS WITH ONE ELEMENT, USE ABOVE CODE */


	
    $(canvas).append (piece); // adds the icon to the board
    turn.push(data.turnNumber);

}

Sotonopoly.prototype.initializeBoard = function ( canvas )
{
	
	// Hex colours for each of the categories on the board
	var brown = "#9f4710";
    var lightBlue = "#00c2f5";
    var pink = "#ff006e";
    var orange = "#ff7600";
    var red = "#ff0000";
    var yellow = "#faea00";
    var green = "#00ad5c";
    var darkBlue = "#2c43a3";
	
	// Locations are in order. The order needs to match the order of the locations
	// on the board in a clockwise direction starting from GO!
    var areas = [
        //{ pos: [692, 693], size: [108, 107], tooltip: "GO!" },
        { pos: [625, 693], size: [67, 107], tooltip: "Avenue Campus", color: "#9f4710", price: 60, rent: [2, 10, 30, 90, 160, 250], houses: 50, mortgage: 30, type: "property" },
       // { pos: [564, 693], size: [61, 107], tooltip: "Community Chest", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"},
        { pos: [499, 693], size: [65, 107], tooltip: "Winchester Campus", color: "#9f4710", price: 60, rent: [4, 20, 60, 180, 320, 450], houses: 50, mortgage: 30, type: "property" },
        { pos: [434, 693], size: [65, 107], tooltip: "Hobbit Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
        { pos: [369, 693], size: [65, 107], tooltip: "The Bridge", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
        { pos: [304, 693], size: [65, 107], tooltip: "Shackleton", color: "#00c2f5", price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
        //{ pos: [239, 693], size: [65, 107], tooltip: "Chance", color: "none",  price: "none", rent: "none", houses: "none", mortgage: "none"  },
        { pos: [174, 693], size: [65, 107], tooltip: "Management", color: "#00c2f5",  price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
        { pos: [109, 693], size: [65, 107], tooltip: "Music", color: "#00c2f5",  price: 120, rent: [8, 40, 100, 300, 450, 600], houses: 50, mortgage: 60, type: "property" },
        { pos: [0, 693], size: [108, 107], tooltip: "Jail", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "jail" },
        { pos: [0, 628], size: [108, 65], tooltip: "Law", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 120, type: "property" },
        { pos: [0, 563], size: [108, 65], tooltip: "SUSU Shop", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "board/shop-logo.png" },
        { pos: [0, 498], size: [108, 65], tooltip: "Murray Building", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 70, type: "property" },
        { pos: [0, 433], size: [108, 65], tooltip: "Nuffield Theatre", color: "#ff006e", price: 160, rent: [12, 60, 180, 500, 700, 900], houses: 100, mortgage: 80, type: "property" },
        { pos: [0, 368], size: [108, 65], tooltip: "The Stag's", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
        { pos: [0, 303], size: [108, 65], tooltip: "Politics", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
        //{ pos: [0, 238], size: [108, 65], tooltip: "Community Chest", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"},
        { pos: [0, 173], size: [108, 65], tooltip: "Tizard Building", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
        { pos: [0, 108], size: [108, 65], tooltip: "Psychology", color: "#ff7600", price: 200, rent: [16, 80, 220, 600, 800, 1000], houses: 100, mortgage: 100, type: "property" },
        //{ pos: [0, 0], size: [108, 108], tooltip: "Free Parking" },
        { pos: [109, 0], size: [65, 107], tooltip: "Physics", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
        //{ pos: [174, 0], size: [63, 107], tooltip: "Chance", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"},
        { pos: [238, 0], size: [65, 107], tooltip: "Lanchester", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
        { pos: [304, 0], size: [65, 107], tooltip: "Maths", color: "#f00", price: 240, rent: [20, 100, 300, 750, 925, 1100], houses: 150, mortgage: 120, type: "property" },
        { pos: [369, 0], size: [65, 107], tooltip: "The Stile", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
        { pos: [434, 0], size: [65, 107], tooltip: "Eustice", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 130, type: "property" },
        { pos: [499, 0], size: [65, 107], tooltip: "Graham Hill", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 13, type: "property" },
        { pos: [564, 0], size: [65, 107], tooltip: "SUSU Café", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "board/cafe-logo.png" },
        { pos: [628, 0], size: [64, 107], tooltip: "Chemistry", color: "#faea00", price: 280, rent: [24, 120, 360, 850, 1025, 1200], houses: 150, mortgage: 140, type: "property" },
        //{ pos: [692, 0], size: [108, 108], tooltip: "Go to Jail" },
        { pos: [692, 108], size: [108, 65], tooltip: "Nightingale", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
        { pos: [692, 173], size: [108, 65], tooltip: "EEE", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
        //{ pos: [692, 238], size: [108, 65], tooltip: "Community Chest", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"  },
        { pos: [692, 303], size: [108, 65], tooltip: "Life Sciences", color: "#00ad5c", price: 320, rent: [28, 150, 450, 1000, 1400], houses: 200, mortgage: 160, type: "property" },
        { pos: [692, 368], size: [108, 65], tooltip: "The Crown Inn", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
        //{ pos: [692, 433], size: [108, 65], tooltip: "Chance", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"  },
        { pos: [692, 498], size: [108, 65], tooltip: "Zepler", color: "#2c43a3", price: 350, rent: [28, 150, 450, 1000, 1200, 1400], houses: 200, mortgage: 160, type: "property" },
        { pos: [692, 563], size: [108, 65], tooltip: "Jesters Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
        { pos: [692, 628], size: [108, 65], tooltip: "Mountbatten", color: "#2c43a3", price: 400, rent: [50, 200, 600, 1400, 1700, 2000], houses: 200, mortgage: 200, type: "property" },
    ];
       
    
    var svgNS = "http://www.w3.org/2000/svg";
    var svg = canvas;
    for ( var i in areas )
    {
        var a = areas[i];
        var element = document.createElementNS (svgNS, "rect");
        $(element)
            .attr ({
				x: a.pos[0],
				y: a.pos[1],
            	width: a.size[0],
            	height: a.size[1],
            	opacity: 0,
            	color: a.color
        	})
            .css ({
            	"stroke-width": 2,
            	fill: "white",
            	
        	});
        
        // Add the newly created rect element to the board
        $(svg).append (element);
        a.element = element;
        
        $(element)
            // Assign data to this rect element
            .data ("area", a)
            .mouseover (function()
            {
            	var data = $(this).data("area");            
                $(this).css ("opacity", "0.5");
				if ( data.type == "property" )
				{
					if ( data.color != "none" )
					{
						$("#property .title").css ("background-color", data.color);
					}
					else
					{
						$("#property .title").css ("background-color", "#fff");
					}
					$("#property .title").html (data.tooltip);
					$("#property .rent-site-only").text(data.rent[0]);
					$("#property .rent-one-house").text(data.rent[1]);
					$("#property .rent-two-houses").text(data.rent[2]);
					$("#property .rent-three-houses").text(data.rent[3]);
					$("#property .rent-four-houses").text(data.rent[4]);
					$("#property .rent-hotel").text(data.rent[5]);
					
					// test for ownership at some point
					// the #ownership div will show who owns the property
					$("#property #ownership").hide();
					
					$(".location").stop (true, true);
					$("#property").fadeIn ("fast");
				}
				else if ( data.type == "pub" )
				{
					$("#pub .title").html (data.tooltip);
					
					$(".location").stop (true, true);
					$("#pub").fadeIn ("fast");
				}
				else if ( data.type == "shop" )
				{
					$("#shop .title").html (data.tooltip);
					$("#shop #shop-image").attr ("src", data.logo);
					
					$(".location").stop (true, true);
					$("#shop").fadeIn ("fast");
				}
            })
            .mouseout (function()
            {
                $(this).css ("opacity", "0");
                $(".location").hide();
            })
            .mousemove (function (e)
            {
				var area = $(this).data ("area");
			
            	// Let's be smart about where to put this..
            	var top, left, right, bottom;
            	var div = $("#" + area.type);
            	var pagewidth = parseInt ($(document).width());
            	var pageheight = parseInt ($(document).height());
            	var divwidth = parseInt (div.outerWidth());
            	var divheight = parseInt (div.outerHeight());
            	
            	top = e.pageY + 10;
            	left = e.pageX;
            	right = left + divwidth;
            	bottom = top + divheight;
            	
            	if ( right > pagewidth )
            	{
                    left = e.pageX - divwidth;
            	}
            	
            	if ( bottom > pageheight )
            	{
            		top = e.pageY - divheight - 10;
            	}
            	
            	$("#" + area.type).offset ({"top": top, "left": left});
            });
    }
}

Sotonopoly.prototype.onChannelOpen = function()
{
	log ("channel opened");
};

// Acts as a message dispatcher. Message is dispatched based on the
// message.data.status field.
Sotonopoly.prototype.onChannelMessage = function ( message )
{
	var msg = $.parseJSON (message.data);
    if ( 'error' in msg )
    {
        alert (msg.error);
        return;
    }
    
	if ( !('status' in msg) )
	{
		log ("could not dispatch the message to correct handler. no status key exists in JSON object");
		log (msg)
	}
	else
	{
		if ( msg.status in this.message_handlers )
		{
			this.message_handlers[msg.status] (msg);
            this.redraw();
		}
		else
		{
			log ("no message handler exists for status \"" + msg.status + "\"");
		}
	}
};

Sotonopoly.prototype.onChannelError = function ( err )
{
	log ("ERROR: " + err.description);
};

// Updates the positions of pieces and stuff
Sotonopoly.prototype.redraw = function()
{
    
};

