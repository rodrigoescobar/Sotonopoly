//Based on function from the Prototype JS framework.
//This is to make life easier when working with scopes in Javascript.
//You can read more about it here:
//http://www.digital-web.com/articles/scope_in_javascript/
Function.prototype.bind = function ( obj )
{
	var method = this,
	temp = function()
	{
		return method.apply (obj, arguments);
	};

	return temp;
};

// Centering an element, from:
// http://stackoverflow.com/questions/210717/using-jquery-to-center-a-div-on-the-screen
jQuery.fn.center = function () {
    this.css("position","absolute");
    this.css("top", (($(window).height() - this.outerHeight()) / 2) + $(window).scrollTop() + "px");
    this.css("left", (($(window).width() - this.outerWidth()) / 2) + $(window).scrollLeft() + "px");
    return this;
}

//Wrapper function so that we can just rewrite this later on to display stuff
//in our own console.
function log ( data, color )
{
	console.log (data);

	if(typeof color == "undefined") {
		color = "#000000"; // default color for log messages
	}

	var message = $("<div style='color: " + color + ";'> " + data + "</div>");
	$("#log").append(message);
	var position = $("#log div:last").position();
	$("#log").scrollTop(position.top);
}

function Sotonopoly ( canvas, client_id, game_key )
{
	// Game state. This should be kept up to date by the client.
	// Most messages received from the server should have information on how
	// to update the game state.
	//
	// The board should probably get redrawn as well when the game state changes
	// using the this.redraw() function.
	this.game_state = {
			key: null,
			players: [],
			chance_cards: [],
			community_cards: [],
			buildings: [],
			in_progress: false,
			current_turn: 1,
			started: false
	};

	// All valid messages from the server should have a 'status' field describing
	// what type of message it is. The keys in this message_handlers field
	// should match the possible status types. The JavaScript will then call the
	// function assigned to the message type below.
	this.message_handlers = {
			player_joined: this.onPlayerJoin,
			you: this.onSelfJoined,
			current_players: this.onOtherJoined,
			bought: this.onPlayerBoughtProperty,
			player_ended_turn: this.onPlayerEndTurn,
			game_started: this.onGameStart,
			turn: this.onPlayerTurn,
			die_roll: this.onDieRoll,
			tax: this.onTaxed,
			go_to_jail: this.onJailed
	};

	// Using an array because we might add multiple players from the same client
	// session. This shouldn't really be an array because a client should only
	// be connected once, but for the purposes of making testing easier we'll
	// have it like this...
	this.my_players = [];

	// Is this game started by me?
	this.my_game = false;

	// Some info about our turn
	this.turn = {
		has_moved: false, // Moved this turn yet?
		rolled_doubles: false, // Rolled doubles last turn?
		
		// Is the player currently improving sites: will change the
		// way viewing of building cards is performed
		improving_sites: false,
		currently_improving: null // Reference to building we're currently improving
	};

	this.initializeBoard (canvas);
	this.updateButtons();
	this.setupGame (client_id, game_key);
}

Sotonopoly.prototype.onJailed = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player_id);
	if ( p === null ) return;

	p.in_jail = true;
	log (p.name + ": Was sent to jail.");
};

Sotonopoly.prototype.onTaxed = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player_id);
	if ( p === null ) return;

	p.money = data.money;
	log (p.name + ": Paid tax of Â£" + -parseInt (data.money_change), p.colour);
};

Sotonopoly.prototype.onPlayerBoughtProperty = function ( data )
{
	var p = this.getPlayerFromTurnNumber (data.player);
	if ( p === null ) return;

	var building = this.game_state.buildings[data.property];
	building.owner = p;
	
	p.buildings_owned.push (building);
	p.money = data.money;
	
	log (p.name + ": Bought " + building.name, p.colour);
};

Sotonopoly.prototype.getPlayerFromTurnNumber = function ( turnNumber )
{
	for ( var p in this.game_state.players )
	{
		var player = this.game_state.players[p];
		if ( player.id == turnNumber )
		{
			return player;
		}
	}

	return null;
};

Sotonopoly.prototype.getMyCurrentPlayer = function ()
{
	for ( var p in this.my_players )
	{
		var player = this.my_players[p];
		if ( player.id == this.game_state.current_turn )
		{
			return player;
		}
	}

	return null;
};

Sotonopoly.prototype.isPlayersTurn = function ( player )
{
	if ( player === null ) return false;
	return current_player.id == this.game_state.current_turn;
};

Sotonopoly.prototype.updateButtons = function()
{
	var current_player = this.getMyCurrentPlayer();

	$("#game-options > *").hide();
	if ( !this.game_state.started )
	{
		if ( this.my_game )
		{
			if ( this.game_state.players.length >= 2 )
			{
				$("#start-game").show();
			}
			else
			{
				$("#waiting-players").show();
			}
		}
		else
		{
			$("#waiting-gamestart").show();
		}
	}
	else
	{
		if ( current_player === null )
		{
			// If current_player is null, then it's not this particular client's
			// turn.

			$("#waiting-turn").show();
		}
		else
		{
			$("#show-property").show();
			if ( current_player.in_jail )
			{
				$("#roll").show(); // only if had 3 or less tries
				$("#pay-50-fine").show();
				$("#use-jail-card").show();
			}
			else
			{
				if ( this.turn.has_moved )
				{
					if ( this.turn.improving_sites )
					{
						$("#finished-improving").show();
					}
					else
					{
						var building = this.game_state.buildings[current_player.position];
						if ( !building.owner &&
							(building.type == "pub" || building.type == "property" || building.type == "shop") )
						{
							$("#buy-property").show();
						}
						
						var has_improvable_site = false;
						for ( var b in current_player.buildings_owned )
						{
							var building = current_player.buildings_owned[b];
							if ( building.type == "property" )
							{
								has_improvable_site = true;
								break;
							}
						}
						
						if ( has_improvable_site )
						{
							$("#buy-houses").show();
						}
					
						if ( !this.turn.rolled_doubles )
						{
							$("#end-turn").show();
						}
						else
						{
							$("#roll").show();
						}
					}
				}
				else
				{
					$("#roll").show();
				}
			}
		}
	}
};

Sotonopoly.prototype.onGameStart = function ( data )
{
	log ("Game started", "#000000");
	this.game_state.started = true;
	$(".dice1").show();
	$(".dice2").show();
};

Sotonopoly.prototype.onPlayerEndTurn = function ( data )
{
	var currentPlayer = this.getPlayerFromTurnNumber (this.game_state.current_turn);
	if ( currentPlayer === null )
	{
		return;
	}

	log (currentPlayer.name + ": Ended their turn.", currentPlayer.colour);
	this.game_state.current_turn = data.turn_number;
	this.turn.has_moved = false;
	this.turn.rolled_doubles = false;
};

Sotonopoly.prototype.setupGame = function ( client_id, game_key )
{
	var init_json = { 'client_id': client_id };
	var sotonopoly = this;
	var game_id = window.location.href.split("?join=")[1];
	if ( game_id !=null) {
		//if joining running game
		myprompt("Enter Your Name","Please enter your name:", function (name) {
			init_json.game_key = game_id;
			sotonopoly.setupGameConnection (init_json, function() {
				$.post ('/game/add_player', { 'game_key': sotonopoly.game_state.key, "name": name });
			});
		});
	} else {
		//if starting new game
		myprompt ("Enter Your Name", "New game. Please enter your name:", function (name) {
			sotonopoly.my_game = true;
			sotonopoly.setupGameConnection (init_json, function() {
				$.post ('/game/add_player', { 'game_key': sotonopoly.game_state.key, "name": name });
			});
		});
	}
};

Sotonopoly.prototype.setupGameConnection = function ( init_json, callback )
{
	var sotonopoly = this;
	$.post ('/game/setup', init_json, function (data, success, jqXHR)
	{
		//log ("Connecting to server with token " + data.token, "generic");
		log ("Connecting to server...");
		sotonopoly.game_state.key = data.game_key;

		var port = "";
		if ( document.location.port != "" && document.location.port != "80" )
		{
			port = ":" + document.location.port;
		}

		var join_game_url = document.location.protocol + "//" +
		document.location.hostname + port + 
		document.location.pathname + 
		"?join=" + data.game_key;
		$("#join_url").text (join_game_url);

		var channel = new goog.appengine.Channel (data.token);
		socket = channel.open();
		socket.onopen = function()
		{
			sotonopoly.onChannelOpen.call (sotonopoly);
			window.setTimeout (function() { callback(); }, 1000);
		};
		socket.onmessage = sotonopoly.onChannelMessage.bind (sotonopoly);
		socket.onerror = sotonopoly.onChannelError.bind (sotonopoly);
		socket.onclose = function() { myalert ("Error", "Channel was closed by server."); };

		$("#start-game a").click (function()
		{
			$.post ('/game/start', { game_key: data.game_key });				
		});

		$("#roll a").click (function()
		{
			$.post ('/game/roll', { game_key: data.game_key });
		});

		$("#end-turn a").click (function()
		{
			$.post ('/game/end_turn', { game_key: data.game_key });
		});

		$("#buy-property a").click (function()
		{
			$.post ("/game/buy_property", { game_key: data.game_key });
		});

		$("#pay-50-fine a").click (function()
		{
			$.post ('/game/leave_jail', { game_key: data.game_key, method: "paid" });
		});

		$("#use-jail-card a").click (function()
		{
			$.post ('/game/leave_jail', { game_key: data.game_key, method: "card" });
		});
				
		$("#buy-houses a").click (function()
		{
			var current_player = sotonopoly.getMyCurrentPlayer();
			if ( current_player === null ) return;
			
			sotonopoly.turn.improving_sites = true;
			for ( var b in current_player.buildings_owned )
			{
				var building = current_player.buildings_owned[b];
				if ( building.type == "property" )
				{
					$(building.element).attr ("opacity", "0.5");
					$(building.element).css ("fill", "green");
				}
			}
			
			sotonopoly.updateButtons();
		});
		
		$("#finished-improving a").click (function()
		{
			sotonopoly.turn.improving_sites = false;
			sotonopoly.turn.currently_improving = null;
			
			for ( var b in sotonopoly.game_state.buildings )
			{
				var building = sotonopoly.game_state.buildings[b];
				$(building.element).attr ("opacity", "0.0");
				$(building.element).css ("fill", "white");
			}
			
			sotonopoly.updateButtons();
		});

		sotonopoly.updateButtons();
		$(".box").fadeIn ("slow");
	});
};

Sotonopoly.prototype.addPlayer = function ( player )
{
	var p = this.getPlayerFromTurnNumber (player.turn_number);
	if ( p === null )
	{
		// If a player doesn't already exist with this turn number, then add.
		// This might not be true if you're connected multiple times..
		p = {
				id: player.turn_number,
				name: player.name,
				piece: player.piece,
				money: player.money,
				position: player.position,
				jail_cards: 0,
				in_jail: false,
				buildings_owned: [],
				colour: player.colour,
				jailbreak_attempts: 0
		};
		this.game_state.players.push (p);
	}
	return p;
};

Sotonopoly.prototype.onOtherJoined = function ( data )
{
	for (count=0; count<data.current_players.length; count=count+1)
	{
		log (data.current_players[count]['name'] + ": Currently playing", data.current_players[count]['colour']); // do we really want to log this?

		var player_data = data.current_players[count];
		this.addPlayer (player_data);
	}
};

Sotonopoly.prototype.onSelfJoined = function ( data )
{
	var myPlayer = this.getPlayerFromTurnNumber (data.turn_number);
	if ( myPlayer !== null )
	{
		this.my_players.push (myPlayer);
	}
};

Sotonopoly.prototype.onJoinGame = function()
{
	log ("joined game");
};

Sotonopoly.prototype.onPlayerJoin = function ( data )
{
	this.addPlayer (data);

	for ( var i in this.game_state.players )
	{
		var player = this.game_state.players[i];
		$("#" + player.piece).attr ("opacity", 1);
		switch ( i )
		{
			case "0":
				$("#player_one .content").html (player.name);
				$("#player_one").show();
				break;
				
			case "1":
				$("#player_two .content").html (player.name);
				$("#player_two").show();
				break;
				
			case "2":
				$("#player_three .content").html (player.name);
				$("#player_three").show();
				break;
				
			case "3":
				$("#player_four .content").html (player.name);
				$("#player_four").show();
				break;
		}
	}

	log (data.name + ": Joined the game", data.colour);
};

Sotonopoly.prototype.onPlayerTurn = function (data)
{
	var currentPlayer = this.getPlayerFromTurnNumber(this.game_state.current_turn);
	log (data.name + ": It's my turn", currentPlayer.colour);
};

Sotonopoly.prototype.onDieRoll = function(data)
{
	var currentPlayer = this.getPlayerFromTurnNumber (this.game_state.current_turn);
	var newPosition = data.move_to;
	var building = this.game_state.buildings[newPosition];
	
	var piece = document.getElementById(currentPlayer.piece);
	var coords = this.getCoordinates(currentPlayer.piece, newPosition);

	var xAnimation = document.getElementById(currentPlayer.piece+'Xanimation');
	var yAnimation = document.getElementById(currentPlayer.piece+'Yanimation');
	
	xAnimation.setAttributeNS(null, 'from', piece.getAttribute('x'));
	xAnimation.setAttributeNS(null, 'to', coords[0]);
	
	yAnimation.setAttributeNS(null, 'from', piece.getAttribute('y'));
	yAnimation.setAttributeNS(null, 'to', coords[1]);
	
	
	if ((currentPlayer.position > 0 && currentPlayer.position < 10) || (currentPlayer.position > 20 && currentPlayer.position < 30))
	{
		xAnimation.beginElement();
	}else{
		yAnimation.beginElement();
	}
	if ((currentPlayer.position > 0 && currentPlayer.position < 10) || (currentPlayer.position > 20 && currentPlayer.position < 30))
	{
		yAnimation.beginElement();
	}else{
		xAnimation.beginElement();
	}
	
	this.turn.has_moved = true;
	this.turn.rolled_doubles = (data.die1 == data.die2);
	
	if ( currentPlayer.position > newPosition )
	{
		// Passed GO!
		currentPlayer.money += 200;
	}
	
	currentPlayer.position = newPosition;

	this.animateDiceRoll(data);
	
	log (currentPlayer.name+" has rolled "+data.die1+" and "+data.die2+". This player is moving to "+building.name, currentPlayer.colour);
};

Sotonopoly.prototype.animateDiceRoll = function(data)
{
	var die1 = data.die1;
	var die2 = data.die2;
	var animateTickLength = 10;
	var animationId = window.setInterval(function() {
		var die1shown = Math.floor((Math.random()*6)+1);
		var die2shown = Math.floor((Math.random()*6)+1);
		$(".red_die_face").hide();
		$("#red_die_face_"+die1shown).show();
		$(".blue_die_face").hide();
		$("#blue_die_face_"+die2shown).show();
		animateTickLength = animateTickLength + (animateTickLength * 0.1);
		if (animateTickLength > 5000) {
			$(".red_die_face").hide();
			$(".blue_die_face").hide();
			$("#red_die_face_"+die1).show();
			$("#blue_die_face_"+die2).show();
			clearInterval( animationId );
		}
	},animateTickLength);
}

Sotonopoly.prototype.initializeBoard = function ( canvas )
{
	this.game_state.pieces = [
		{pos: [721, 722], size: [24, 24], name: "mortarboard", path: "images/mortarboard.png"}, 
		{pos: [746, 722], size: [24, 24], name: "dolphin", path: "images/dolphin.png"}, 
		{pos: [721, 747], size: [24, 24], name: "book", path: "images/book.png"}, 
		{pos: [746, 747], size: [24, 24], name: "glass", path: "images/glass.png"},
	];
	                          
	// Locations are in order. The order needs to match the order of the locations
	// on the board in a clockwise direction starting from GO!
	this.game_state.buildings = [
		{ pos: [692, 693], size: [108, 108], name: "GO!" },
		{ pos: [625, 693], size: [62, 108], name: "Avenue Campus", color: "#9f4710", price: 60, rent: [2, 10, 30, 90, 160, 250], houses: 50, mortgage: 30, type: "property" },
		{ pos: [564, 693], size: [62, 108], name: "Community Chest", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"},
		{ pos: [499, 693], size: [62, 108], name: "Winchester Campus", color: "#9f4710", price: 60, rent: [4, 20, 60, 180, 320, 450], houses: 50, mortgage: 30, type: "property" },
		{ pos: [434, 693], size: [62, 108], name: "Hobbit Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
		{ pos: [369, 693], size: [62, 108], name: "The Bridge", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
		{ pos: [304, 693], size: [62, 108], name: "Shackleton", color: "#00c2f5", price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
		{ pos: [239, 693], size: [62, 108], name: "Chance" },
		{ pos: [174, 693], size: [62, 108], name: "Management", color: "#00c2f5",  price: 100, rent: [6, 30, 90, 270, 400, 550], houses: 50, mortgage: 50, type: "property" },
		{ pos: [109, 693], size: [62, 108], name: "Music", color: "#00c2f5",  price: 120, rent: [8, 40, 100, 300, 450, 600], houses: 50, mortgage: 60, type: "property" },
		{ pos: [0, 693], size: [108, 108], name: "Jail", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "jail" },
		{ pos: [0, 628], size: [108, 62], name: "Law", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 120, type: "property" },
		{ pos: [0, 563], size: [108, 62], name: "SUSU Shop", color: "none", price: 150, rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "images/shop-logo.png" },
		{ pos: [0, 498], size: [108, 62], name: "Murray Building", color: "#ff006e", price: 140, rent: [10, 50, 150, 450, 625, 750], houses: 100, mortgage: 70, type: "property" },
		{ pos: [0, 433], size: [108, 62], name: "Nuffield Theatre", color: "#ff006e", price: 160, rent: [12, 60, 180, 500, 700, 900], houses: 100, mortgage: 80, type: "property" },
		{ pos: [0, 368], size: [108, 62], name: "The Stag's", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
		{ pos: [0, 303], size: [108, 62], name: "Politics", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
		{ pos: [0, 238], size: [108, 62], name: "Community Chest" },
		{ pos: [0, 173], size: [108, 62], name: "Tizard Building", color: "#ff7600", price: 180, rent: [14, 70, 200, 550, 750, 950], houses: 100, mortgage: 90, type: "property" },
		{ pos: [0, 108], size: [108, 62], name: "Psychology", color: "#ff7600", price: 200, rent: [16, 80, 220, 600, 800, 1000], houses: 100, mortgage: 100, type: "property" },
		{ pos: [0, 0], size: [108, 108], name: "Free Parking" },
		{ pos: [109, 0], size: [62, 108], name: "Physics", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
		{ pos: [174, 0], size: [62, 108], name: "Chance" },
		{ pos: [238, 0], size: [62, 108], name: "Lanchester", color: "#f00", price: 220, rent: [18, 90, 250, 700, 875, 1050], houses: 150, mortgage: 110, type: "property" },
		{ pos: [304, 0], size: [62, 108], name: "Maths", color: "#f00", price: 240, rent: [20, 100, 300, 750, 925, 1100], houses: 150, mortgage: 120, type: "property" },
		{ pos: [369, 0], size: [62, 108], name: "The Stile", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
		{ pos: [434, 0], size: [62, 108], name: "Eustice", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 130, type: "property" },
		{ pos: [499, 0], size: [62, 108], name: "Graham Hill", color: "#faea00", price: 260, rent: [22, 110, 330, 800, 975, 1150], houses: 150, mortgage: 13, type: "property" },
		{ pos: [564, 0], size: [62, 108], name: "SUSU CafÃ©", color: "none", price: 150, rent: "none", houses: "none", mortgage: "none", type: "shop", logo: "images/cafe-logo.png" },
		{ pos: [628, 0], size: [62, 108], name: "Chemistry", color: "#faea00", price: 280, rent: [24, 120, 360, 850, 1025, 1200], houses: 150, mortgage: 140, type: "property" },
		{ pos: [692, 0], size: [108, 108], name: "Go to Jail" },
		{ pos: [692, 108], size: [108, 62], name: "Nightingale", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
		{ pos: [692, 173], size: [108, 62], name: "EEE", color: "#00ad5c", price: 300, rent: [26, 130, 390, 900, 1100, 1275], houses: 200, mortgage: 150, type: "property" },
		{ pos: [692, 238], size: [108, 62], name: "Community Chest" },
		{ pos: [692, 303], size: [108, 62], name: "Life Sciences", color: "#00ad5c", price: 320, rent: [28, 150, 450, 1000, 1400], houses: 200, mortgage: 160, type: "property" },
		{ pos: [692, 368], size: [108, 62], name: "The Crown Inn", color: "none", price: 200, rent: "none", houses: "none", mortgage: "none", type: "pub" },
		{ pos: [692, 433], size: [108, 62], name: "Chance", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none"  },
		{ pos: [692, 498], size: [108, 62], name: "Zepler", color: "#2c43a3", price: 350, rent: [28, 150, 450, 1000, 1200, 1400], houses: 200, mortgage: 160, type: "property" },
		{ pos: [692, 563], size: [108, 62], name: "Jesters Tax", color: "none", price: "none", rent: "none", houses: "none", mortgage: "none", type: "tax" },
		{ pos: [692, 628], size: [108, 62], name: "Mountbatten", color: "#2c43a3", price: 400, rent: [50, 200, 600, 1400, 1700, 2000], houses: 200, mortgage: 200, type: "property" }
	];

	var svgNS = "http://www.w3.org/2000/svg";
	var xlinkNS="http://www.w3.org/1999/xlink"; // namespace for linking to other documents
	var svg = canvas;

	var sotonopoly = this;

	for ( var i in this.game_state.buildings )
	{
		var a = this.game_state.buildings[i];
		var element = document.createElementNS (svgNS, "rect");
		$(element)
			.attr ({
				x: a.pos[0],
				y: a.pos[1],
				width: a.size[0],
				height: a.size[1],
				opacity: 0.0,
				color: a.color == "none" ? "white" : a.color
			})
			.css ({
				"stroke-width": 2,
				fill: "white"
			});

		// Add the newly created rect element to the board
		$(svg).append (element);
		a.element = element;
		
		$("#player_one").hide();
		$("#player_two").hide();
		$("#player_three").hide();
		$("#player_four").hide();

		$(element)
			// Assign data to this rect element
			.data ("area", a)
			.mouseover (function()
			{
				var data = $(this).data("area");
				$(this).attr ("opacity", "0.5");
				$(".location").stop (true, true);

				if ( data.type == "property" )
				{
					if ( data.color != "none" )
					{
						$("#property .title").css ("background-color", data.color);
						// Small hack to get the text to turn black for yellow backgrounds
						if ( data.color == "#faea00" )
						{
							$("#property .title").css ("color", "black");
						}
						else
						{
							$("#property .title").css ("color", "white");
						}
					}
					else
					{
						$("#property .title").css ("background-color", "#fff");
					}
					$("#property .title").text (data.name);
					$("#property .rent-site-only").text(data.rent[0]);
					$("#property .rent-one-house").text(data.rent[1]);
					$("#property .rent-two-houses").text(data.rent[2]);
					$("#property .rent-three-houses").text(data.rent[3]);
					$("#property .rent-four-houses").text(data.rent[4]);
					$("#property .rent-hotel").text(data.rent[5]);

					// test for ownership at some point
					// the #ownership div will show who owns the property
					$("#property #ownership").hide();

					$("#property").fadeIn ("fast");
				}
				else if ( data.type == "pub" )
				{
					$("#pub .title").text (data.name);

					$("#pub").fadeIn ("fast");
				}
				else if ( data.type == "shop" )
				{
					$("#shop .title").text (data.name);
					$("#shop #shop-image").attr ("src", data.logo);

					$("#shop").fadeIn ("fast");
				}
			})
			.mouseout (function()
			{
				var current_player = sotonopoly.getMyCurrentPlayer();
				var owned_by_current = false;
				if ( current_player !== null )
				{
					var data = $(this).data("area");
					owned_by_current = ( current_player == data.owner );
				}
				
				if ( !sotonopoly.turn.improving_sites || !owned_by_current )
				{
					$(this).attr ("opacity", "0.0");
				}
				
				$(".location").hide();
			})
			.mousemove (function (e)
			{
				var area = $(this).data ("area");

				// Let's be smart about where to put this..
				var top, left, right, bottom;
				var div = $("#" + area.type);
				var pagewidth = parseInt ($(document).width());
				var pageheight = parseInt ($(document).height());
				var divwidth = parseInt (div.outerWidth());
				var divheight = parseInt (div.outerHeight());

				top = e.pageY + 10;
				left = e.pageX;
				right = left + divwidth;
				bottom = top + divheight;

				if ( right > pagewidth )
				{
					left = e.pageX - divwidth;
				}

				if ( bottom > pageheight )
				{
					top = e.pageY - divheight - 10;
				}

				$("#" + area.type).offset ({"top": top, "left": left});
			})
			.click (function (e)
			{
				if ( !sotonopoly.turn.improving_sites )
				{
					return;
				}
				
				var data = $(this).data ("area");
				if ( data.type != "property" ) return;
				
				sotonopoly.turn.currently_improving = data;
				
				var has_hotel = (data.num_houses == 5);
				$("#improve-site #num-houses").html (has_hotel ? 1 : data.num_houses);
				$("#improve-site #building-type").html (has_hotel ? "lab" : "offices");
				
				$("#improve-site h2").html (data.name);
				if ( data.color != "none" )
				{
					$("#improve-site h2").css ("background-color", data.color);
					// Small hack to get the text to turn black for yellow backgrounds
					if ( data.color == "#faea00" )
					{
						$("#improve-site h2").css ("color", "black");
					}
					else
					{
						$("#improve-site h2").css ("color", "white");
					}
				}
				else
				{
					$("#improve-site h2").css ("background-color", "#fff");
				}
				$("#improve-site").show();
			});
	}

	for ( var i in this.game_state.pieces )
	{
		var a = this.game_state.pieces[i];
		var piece = document.createElementNS (svgNS, "image");
		$(piece)
		.attr ({
			id: a.name,
			x: a.pos[0],
			y: a.pos[1],
			width: a.size[0],
			height: a.size[1],
			opacity: 0
		});
		
		var xAnimate = document.createElementNS (svgNS, 'animate');
		xAnimate.setAttributeNS(null, 'id', a.name+'Xanimation' );
		xAnimate.setAttributeNS(null, 'attributeName', 'x' );
        xAnimate.setAttributeNS(null, 'from', a.pos[0] );
        xAnimate.setAttributeNS(null, 'fill', 'freeze' );
        xAnimate.setAttributeNS(null, 'to', a.pos[0] );
        xAnimate.setAttributeNS(null, 'begin', 'indefinite' );
        xAnimate.setAttributeNS(null, 'dur', '1.5' );
        
        var yAnimate = document.createElementNS (svgNS, 'animate');
		yAnimate.setAttributeNS(null, 'id', a.name+'Yanimation' );
		yAnimate.setAttributeNS(null, 'attributeName', 'y' );
        yAnimate.setAttributeNS(null, 'from', a.pos[1] );
        yAnimate.setAttributeNS(null, 'fill', 'freeze' );
        yAnimate.setAttributeNS(null, 'to', a.pos[1] );
        yAnimate.setAttributeNS(null, 'begin', 'indefinite' );
        yAnimate.setAttributeNS(null, 'dur', '1.5' );
	
		piece.setAttributeNS(xlinkNS, "href", a.path);
		piece.appendChild(xAnimate);
		piece.appendChild(yAnimate);
		// Add the newly created rect element to the board
		$(svg).append(piece);
	}
	
	$("#remove-house").click (function()
	{
		if ( !sotonopoly.turn.improving_sites || !sotonopoly.turn.currently_improving ) return;
	
		var current_num = parseInt ($("#num-houses").html());
		if ( current_num <= 0 ) return false;
		
		var type = $("#building-type").html();
		var new_type = type;
		if ( type == "offices" )
		{
			current_num--;
		}
		else if ( type == "lab" )
		{
			current_num = 4;
			new_type = "offices";
		}
		
		$("#num-houses").html (current_num);
		$("#building-type").html (new_type);
		
		$("#add-house, #remove-house").attr ("disabled", "disabled");
		$.post (
			"/game/edit_property",
			{
				game_key: sotonopoly.game_state.key,
				action: "sell",
				property: sotonopoly.game_state.buildings.indexOf (sotonopoly.turn.currently_improving)
			}
		);
	});
	
	$("#add-house").click (function()
	{
		if ( !sotonopoly.turn.improving_sites || !sotonopoly.turn.currently_improving ) return;
	
		var current_num = parseInt ($("#num-houses").html());
		var type = $("#building-type").html();
		var new_type = type;
				
		if ( type == "lab" ) return false;
		if ( type == "offices" )
		{
			current_num++;
			if ( current_num > 4 )
			{
				current_num = 1;
				new_type = "lab";
			}
		}
		
		$("#num-houses").html (current_num);
		$("#building-type").html (new_type);
		
		$("#add-house, #remove-house").attr ("disabled", "disabled");
		$.post (
			"/game/edit_property",
			{
				game_key: sotonopoly.game_state.key,
				action: "buy",
				property: sotonopoly.game_state.buildings.indexOf (sotonopoly.turn.currently_improving)
			}
		);
	});
	
	$("#improve-site").center();
	$("#improve-site #finished-improving").click (function()
	{
		sotonopoly.turn.currently_improving = false;
		$("#improve-site").hide();
	});
};

Sotonopoly.prototype.onChannelOpen = function()
{
	log ("Connection with server open");
};

//Acts as a message dispatcher. Message is dispatched based on the
//message.data.status field.
Sotonopoly.prototype.onChannelMessage = function ( message )
{
	var msg = $.parseJSON (message.data);
	if ( 'error' in msg )
	{
		myalert ("Error", msg.error);
		return;
	}

	if ( !('status' in msg) )
	{
		log ("could not dispatch the message to correct handler. no status key exists in JSON object");
		log (msg);
	}
	else
	{
		if ( msg.status in this.message_handlers )
		{
			this.message_handlers[msg.status].call (this, msg);
			this.updateButtons();
			this.updatePlayerList();
		}
		else
		{
			log ("no message handler exists for status \"" + msg.status + "\"");
		}
	}
};

Sotonopoly.prototype.onChannelError = function ( err )
{
	log ("ERROR: " + err.description);
};

Sotonopoly.prototype.getCoordinates=function(piece,move_to){
	var building = this.game_state.buildings[move_to];
	var xCentre = building.pos[0] + (building.size[0]/2);
	var yCentre = building.pos[1] + (building.size[1]/2);

	if (piece == 'mortarboard')
	{
		xCentre = xCentre - 25;
		yCentre = yCentre - 25;
	} else if(piece == 'dolphin')
	{
		xCentre = xCentre;
		yCentre = yCentre - 25;
	} else if(piece == 'book')
	{
		xCentre = xCentre - 25;
		yCentre = yCentre;
	} else (piece == 'glass')
	{
		xCentre = xCentre;
		yCentre = yCentre;
	}
	return [xCentre, yCentre];
};

Sotonopoly.prototype.updatePlayerList = function () 
{
	var players = this.game_state.players;
	for(var i = 0; i < players.length; i++) {
		switch(players[i].id) {
			case 1:
				$("#player_one .amount").html(players[i].money);
				break;
			case 2:
				$("#player_two .amount").html(players[i].money);
				break;
			case 3:
				$("#player_three .amount").html(players[i].money);
				break;
			case 4:
				$("#player_four .amount").html(players[i].money);
				break;
		}
	}
};
