\documentclass[12pt,a4paper]{article}
\usepackage[latin1]{inputenc}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{amssymb}
\begin{document}
\input{./title_page.tex} % Add the title page
\section{Description of Prototype Functionality}
The application is a take on the multiplayer game of Monopoly where the server is based on the Google App Engine (at http://sotonopoly.appspot.com). This version uses buildings at the University of Southampton as the properties and has a theme of life as a university student in Southampton.

If a player goes straight to the domain without a link passed in the URL, then a game is created for them and they are provided with a link they can use to invite their friends to their game. Once there are at least two players, a link is provided allowing them to start playing straight away. Once four players are present the game is started automatically. In either case, once the game is started no new players can join.

The players can then move around the board using dice rolls and buy properties which can be improved with offices and research labs, similar to houses and hotels in the original Monopoly. Other changes from the original version are stations are now pubs based on or around the University of Southampton's Highfield Campus, the taxes are now based on paying for venues in Portswood, the jail has been changed to the library and the chance and community chest cards messages have been changed. 

The server contains a complete game state and contains all of the game logic. The client contains a smaller version of the game state and a small amount of game logic. Clients can connect to a game and communicate with the server using AJAX requests. The server then sends messages to the client through the use of JSON (JavaScript Object Notation) messages in the Google Channels provided by the App Engine. The client keeps its game state updated from the messages sent from the server.

The JavaScript provides an animated interface on the client, displaying only the options which are relevant at any given time. It allows a player to keep track of what other users are doing in the game, which properties they own and their current money levels. It also provides a console with a history of actions.

Once all other players are bankrupt or all other players have left the game, then the remaining player is declared the winner.
\newpage
\section{List of Tools and Techniques Used}
\subsection{Tools}
Firstly, due to the project being required to run on the Google App Engine, we were required to use the Google App Engine and the Google App Engine SDK for Python. The SDK allowed for us to run the application locally throughout the development and allows for convenient viewing of logs and the datastore. Furthermore, it allows for a straightforward deployment of the application to the App Engine.

Secondly, since this was a group project we decided to use a version control system, in particular Subversion. We elected to use the ECS Forge as it provides SVN management and it is hosted within ECS, making it straightforward as we all already have access to it and accounts set up. 

Finally, we used several browser tools for debugging the client-side JavaScript. Namely, these are Firebug which was used in Firefox, Google Chrome's inbuilt element inspector and Opera's Dragonfly.

\subsection{Techniques}
We held frequent team meetings so that everyone knew what they were doing, and to let the others know of any problems they were having with their tasks. Following each of these meetings, we worked together in the same place, and this allowed us to progress on the project at a much faster pace than when working separately. Some of the techniques we used for team and project management are reminiscent of Agile techniques and allowed us to complete only the aspects of Monopoly which we felt could be completed in full and to a high quality.

We used the Google Channels which are provided by the App Engine to push messages to the clients. We elected to do this rather than polling the server as it allows for messages to be sent immediately rather than publishing messages or the game state on the server.

\newpage
\section{Relevant Statistics}

Only files that we have developed have been included in the statistics below.

\begin{center}
	\begin{tabular}{ c | c | c | c | c }
		Language & Files & Lines of code & Comments & Blank lines \\
		\hline
		JavaScript & 2 & 1226 & 77 & 262 \\
		Python & 7 & 953 & 132 & 178 \\
		HTML & 3 & 279 & 1 & 11 \\
		CSS & 1 & 221 & 7 & 48 \\
		YAML & 1 & 32 & 0 & 11 \\
		\hline
		Total & 14 & 2711 & 217 & 510 
	\end{tabular}
\end{center}

We have used several JavaScript and Python libraries in our application. The use of jQuery made the JavaScript more efficient, makes AJAX queries simpler, provides straightforward access to the DOM, aids cross-browser compatibility and provides a richer interface than standard JavaScript. This allowed us to write high level JavaScript without concerning ourselves with how different browsers will behave.

jQuery UI was used to style custom prompts and alerts instead of the normal browser prompts and alerts; implementing these in JavaScript allows for the JavaScript to remain running whilst they are on screen and easily links in with jQuery. It was essential that the JavaScript was kept running while the prompt and alert dialogues were displayed, in order for Google's Channel API to continue sending heartbeats to the server. The jQuery library was included to the HTML page through jQuery's content delivery network (CDN), whilst jQuery UI was included through Microsoft's CDN. As the URIs are public, this allows for the browser to cache the JavaScript files and use them between sites.

On the server, we used the libraries that are native to the Google App Engine. These were namely the Channels library and the Webapp2 framework. The former was used as a straightforward method of pushing messages to the client from the server. The latter was used to create Request Handlers so the server can handle dynamic URLs and invoke the correct methods in the game.

\newpage
\section{Overview of Design and Implementation}
Server-side, we used object-oriented Python to conform with the standards set out by both the Google App engine and the Model-View-Controller architecture. We separated the various data containing "model" classes (such as the Game and Player states) from the game logic of the "controller" class (GameUpdater).

The server pushes messages to the clients through channels, making use of the framework and API provided by Google. Messages containing what changes have occurred (rather than the entire game state being sent) allow the JavaScript to keep its own game state on the client, to minimize network traffic. The messages are based on a hash map of message-type-to-function, which allows for uniform handling of all message types.

The client calls methods on the server through AJAX calls using the POST function. This naturally prevents the page being redrawn each time a request is made, as well as adding some amount of tamper-protection from malicious users (however, all actions are validated server-side as a precaution).

Graphically, the application uses a mixture of static images and overlays dynamically drawn using SVG (Scalable Vector Graphics). The board itself is a static image as it is not changed, which saves resources, whereas the pieces, houses and other contextual graphics are drawn where and when they are required.

\newpage
\section{Evaluation}
This project can be considered a resounding success - all core functionality was implemented as planned (up to four players can play a full game of Sotonopoly) and extra functionality (such as a game lobby and chat function) was included to create a richer user experience.

The use of channels allowed for easy publishing of messages to a subscribed client. However, the cost of using the channels is fairly expensive. We decided that this was acceptable as the one to two second delay was still quicker than polling the server and is a cleaner approach. It also allowed us to use existing code provided by the App Engine which allowed us to avoid writing our own methods.

In retrospect, the JavaScript framework Raphael could have been appropriate to use when drawing SVG objects, and could have simplified our use of SVG in general. However, we did not discover this framework until a significant way into the project. Despite this, our approach was functionally sound and gave us bespoke control over the SVG elements.

Due to time constraints, the game lacks certain features of the original Monopoly such as trading and auctions. These two aspects of the game were intentionally left out as they are not explicitly required to play the game. If there had been more time available for this project, then this functionality could have been implemented. 

The use of agile methods throughout the project proved successful and allowed for the constantly changing requirements we had. Furthermore, it allowed us to rapidly develop the application through iterative improvement.
\end{document}
